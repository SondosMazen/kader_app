import 'dart:convert';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:kader_app/api/api_controller.dart';
import 'package:kader_app/api/api_settings.dart';
import 'package:kader_app/custom_widgets/app_bar_screen.dart';
import 'package:kader_app/custom_widgets/app_search_text_feild.dart';
import 'package:kader_app/locale/AppLocalizations.dart';
import 'package:kader_app/models/autogenerated.dart';
import 'package:kader_app/models/result.dart';
import 'package:kader_app/utlies/app_colors.dart';
import 'package:kader_app/utlies/size_config.dart';
import 'package:share/share.dart';
import 'package:http/http.dart' as http;
import 'details_of_the_news_screen.dart';
import 'package:kader_app/screens/search_page.dart';

class NewsScreen extends StatefulWidget {
  List<Result> results;

  @override
  _NewsScreenState createState() => _NewsScreenState();
}

class _NewsScreenState extends State<NewsScreen> {
  int currentIndex;
  bool _hasMore;
  int _pageNumber;
  bool _error;
  bool _loading;
  final int _defaultPhotosPerPageCount = 5;
  List<Result> _results = [];
  List<Result> _searchResult = [];

  final int _nextPageThreshold = 5;
  final globalKey = new GlobalKey<ScaffoldState>();
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

  Future<List<Result>> _resultListFuture;
  List<String> imagePaths = [];

  //final TextEditingController _controller = TextEditingController();
  TextEditingController _searchTextController;
  var _controller = TextEditingController();

  @override
  void dispose() {
    _searchTextController.dispose();
  }

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    _hasMore = true;
    _pageNumber = 0;
    _error = false;
    _loading = true;
    _results = [];
    fetchResults();
    _resultListFuture = ApiController().indexPost();
    _searchTextController = TextEditingController();

    bool _loaded = false;
    var placeholder = AssetImage("images/noun_download_3465420.png");
  }

  @override
  Widget build(BuildContext context) {
    SizeConfig().init(context);
    return Scaffold(
      key: globalKey,
      appBar: AppBarScreen(
        text: AppLocalizations.of(context).translate("News") ?? "News",
        openDrawer: () {
          _scaffoldKey.currentState.openDrawer();
        },
      ),
      body: Container(
        padding: EdgeInsetsDirectional.only(
          start: SizeConfig.scaleWidth(16),
          end: SizeConfig.scaleWidth(16),
          top: SizeConfig.scaleHeight(18),
        ),
        decoration: BoxDecoration(
          color: AppColors.DOTS_HORIZANTAL_COLOR,
        ),
        child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
          search(),
          SizedBox(
            height: SizeConfig.scaleHeight(16),
          ),
          Expanded(
            child: getBody(),
          ),
        ]),
          ),

    );
  }

  Widget getBody() {
    if (_results.isEmpty) {
      if (_loading) {
        return Center(child: CircularProgressIndicator());
      } else if (_error) {
        return Center(
          child: InkWell(
            onTap: () {
              setState(() {
                _loading = true;
                _error = false;
                fetchResults();
              });
            },
            child: Text("Error while loading photos, tap to try agin"),
          ),
        );
      }
    } else {
      return _results.length != 0
          ? RefreshIndicator(
              child: ListView.builder(
                  itemCount: _results.length + (_hasMore ? 1 : 0),
                  itemBuilder: (context, index) {
                    currentIndex = index;

                    if (index == _results.length - _nextPageThreshold) {
                      fetchResults();
                    }
                    if (index == _results.length) {
                      if (_error) {
                        return Center(
                            child: InkWell(
                          onTap: () {
                            setState(() {
                              _loading = true;
                              _error = false;
                              fetchResults();
                            });
                          },
                          child: Padding(
                            padding: EdgeInsetsDirectional.only(
                                start: SizeConfig.scaleWidth(16),
                                end: SizeConfig.scaleWidth(16),
                                top: SizeConfig.scaleHeight(18),
                                bottom: SizeConfig.scaleHeight(18)),
                            child: Text(
                                "Error while loading photos, tap to try agin"),
                          ),
                        ));
                      } else {
                        return Center(child: CircularProgressIndicator());
                      }
                    }
                    final Result photo = _results[index];
                    return GestureDetector(
                      onTap: () {
                        Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) =>
                                  DetailsNewsScreen(news: _results[index]),
                            ));
                      },
                      child: Card(
                        child: Column(
                          children: [
                            // new Flexible(
                            //     child: searchresult.length != 0 || _controller.text.isNotEmpty
                            //         ? new ListView.builder(
                            //       shrinkWrap: true,
                            //       itemCount: searchresult.length,
                            //       itemBuilder: (BuildContext context, int index) {
                            //         String listData = searchresult[index];
                            //         return new ListTile(
                            //           title: new Text(listData.toString()),
                            //         );
                            //       },
                            //     )
                            //         : new ListView.builder(
                            //       shrinkWrap: true,
                            //       itemCount: _results.length,
                            //       itemBuilder: (BuildContext context, int index) {
                            //         Result listData = _results[index];
                            //         return new ListTile(
                            //           title: new Text(listData.toString()),
                            //         );
                            //       },
                            //     ),
                            // ),
                            Row(
                              // crossAxisAlignment: CrossAxisAlignment.center,
                              // mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                SizedBox(
                                  width: SizeConfig.scaleWidth(10),
                                ),
                                Text(photo.postDate),
                                Spacer(),
                                ElevatedButton(
                                  style: ElevatedButton.styleFrom(
                                    primary: Colors.white,
                                    onPrimary: Colors.white,
                                    elevation: 0,
                                  ),
                                  child: Icon(
                                    Icons.share,
                                    color: Colors.red.shade900,
                                  ),
                                  onPressed: () =>
                                      _onShareWithEmptyOrigin(context),
                                ),
                              ],
                            ),

                            Image.network(
                              photo.imageUrl,
                              fit: BoxFit.fitWidth,
                              width: double.infinity,
                              height: SizeConfig.scaleHeight(170),
                            ),
                            Padding(
                              padding: EdgeInsets.all(16),
                              child: Text(photo.postTitle,
                                  style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      fontSize: 16)),
                            ),
                          ],
                        ),
                      ),
                    );
                  }),
              onRefresh: _getData,
            )
          : Center(child: CircularProgressIndicator());
    }
    return Container();
  }
  /////////////////////////////////////////////////////////////////////
  Widget search() {
    return Container(
      padding: EdgeInsetsDirectional.only(
        start: SizeConfig.scaleWidth(5),
        end: SizeConfig.scaleWidth(5),
      ),
      height: SizeConfig.scaleHeight(40),
      child: TextField(
        controller: _controller,
        onChanged:(text){
          if(text.isEmpty){
            setState(() {
              _results = [];
              _error = false;
              _loading = true;
              fetchResults();
            });}},
        style: TextStyle(
          fontSize: SizeConfig.scaleTextFont(16),
          fontFamily: 'Tajawal',
          fontWeight: FontWeight.w500,
          color: AppColors.HINT_TEXTFEILD_COLOR,
        ),
        decoration: InputDecoration(
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(26),
          ),
          contentPadding: EdgeInsetsDirectional.only(
            start: SizeConfig.scaleWidth(20),
          ),
          suffixIcon: IconButton(

            onPressed:(){
              FocusScope.of(context).unfocus();
              setState(() {
                _results = [];
                _error = false;
                _loading = true;
                fetchResults(_controller.text);
              });

            },
            icon: Icon(Icons.search),
            color: Colors.black,
          ),
          // prefixIcon: Icon(
          //   Icons.search,
          //   color: AppColors.HINT_TEXTFEILD_COLOR,
          // ),
          hintText: 'بحث',
          // prefixText: ' ',
          hintStyle: TextStyle(
            fontSize: SizeConfig.scaleTextFont(16),
            fontFamily: 'Tajawal',
            color: AppColors.HINT_TEXTFEILD_COLOR,
            fontWeight: FontWeight.w500,
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(26),
            borderSide: BorderSide(
              color: AppColors.HINT_TEXTFEILD_COLOR,
              width: SizeConfig.scaleWidth(1),
            ),
          ),
          //getBorder(AppColors.HINT_TEXTFEILD_COLOR),
          focusedBorder: getBorder(),
        ),
      ),
    );
  }
  ////////////////////////////////////////////////////////////////////
  Future<void> _getData() async {
    setState(() {
      _pageNumber = 0;
      _results = [];
      fetchResults();
    });
  }

  Future<void> fetchResults([String text]) async {
    String search=text??'';
    String url;

    try {
      if(search.isNotEmpty){
        url=ApiSettings.API_POST + "&search=$search";
      }
      else{
        url=ApiSettings.API_POST + "&page=$_pageNumber";
      }

      final response = await http.get(
          Uri.parse(url));
      print(url);
      // List<Results> fetchedPhotos = Results.parseList(jsonDecode(response.body));


      List<Result> fetchedPhotos =
          Autogenerated.fromJson(jsonDecode(response.body)).result;
      // fetchedPhotos.forEach((element) {
      //   print(element.id);
      //   print(element.postDate);
      //   print(element.guid);
      //   print(element.postTitle);
      //   print(element.imageUrl);
      //   print(element.postContent);
      //   print("===================");
      // });
      setState(() {
        _hasMore = fetchedPhotos.length == _defaultPhotosPerPageCount;
        _loading = false;
        _pageNumber = _pageNumber + 1;
        print("sondos______" + _pageNumber.toString());
        _results.addAll(fetchedPhotos);
      });
    } catch (e) {
      setState(() {
        _loading = false;
        _error = true;
      });
    }
  }

  //
  // _onDeleteImage(int position) {
  //   setState(() {
  //     imagePaths.removeAt(position);
  //   });
  // }

  _onShareWithEmptyOrigin(BuildContext context) async {
    await Share.share("text");
  }

  OutlineInputBorder getBorder() {
    return OutlineInputBorder(
      borderRadius: BorderRadius.circular(26),
      borderSide: BorderSide(
        color: AppColors.HINT_TEXTFEILD_COLOR,
        width: SizeConfig.scaleWidth(1),
      ),
    );
  }
}


class Results {
  String id;
  String postDate;
  String guid;
  String postTitle;
  String postContent;
  String imageUrl;

  Results(this.id, this.postDate, this.guid, this.postTitle, this.postContent,
      this.imageUrl);

  factory Results.fromJson(Map<String, dynamic> json) {
    return Results(json["id"], json["postDate"], json["guid"],
        json["postTitle"], json["postContent"], json["imageUrl"]);
  }

  static List<Results> parseList(List<dynamic> list) {
    return list.map((i) => Results.fromJson(i)).toList();
  }
}
