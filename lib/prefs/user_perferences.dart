import 'package:kader_app/models/SSO_Info.dart';
import 'package:kader_app/models/autogenerated.dart';
import 'package:kader_app/models/user.dart';
import 'package:shared_preferences/shared_preferences.dart';

class UserPreferences {
  UserPreferences._() {
    initialize();
  }

  static UserPreferences _instance;
  SharedPreferences _pref;

  static UserPreferences get instance {
    if (_instance != null) {
      print("INITIALIZED");
      return _instance;
    } else {
      print("NOT INITIALIZED");
    }

    _instance = UserPreferences._();
    return _instance;
  }

  void initialize() async {
    print("initialize");
    _pref = await SharedPreferences.getInstance();
  }

  final String idKey = "USER_ID";
  final String passwordKey = "password";
  final String isLoggedInKey = "isLoggedIn";
  final String token = "token";
  final String language = "language";

  Future saveToken(String  p_token) async{
    await _pref.setString("token", p_token);
  }

  Future saveFcmToken(String  fcm_token) async{
    await _pref.setString("fcm_token", fcm_token);
  }

  Future save_sso_info(String  sso_info) async{
    await _pref.setString("sso_info", sso_info);
  }

  Future save_user(SSO_Info user) async{
    await _pref.setBool("isLogged", true);
    await _pref.setString("user_id", user.userId);
    await _pref.setString("account_type", user.accountType);
    await _pref.setString("name", user.name);
    await _pref.setString("mobile", user.mobile);
    await _pref.setString("ministry_cd", user.ministryCd);

  }

  // Future<bool> login(String userEmail, String userPassword) async {
  //   String email = _pref.getString(idKey);
  //   String password = _pref.getString(passwordKey);
  //   bool isCorrect = userEmail == email && userPassword == password;
  //   await _pref.setBool(isLoggedInKey, isCorrect);
  //   return isCorrect;
  // }

  String getToken(){
    return "Bearer" + _pref.getString(token);
  }

  Future logout() async {
    await _pref.remove(idKey);
    await _pref.remove(passwordKey);
    await _pref.remove(token);
    return await _pref.setBool(isLoggedInKey, false);
  }

  bool isLoggedIn() {
    if(_pref == null) return false;
    return _pref.getBool(isLoggedInKey) ?? false;
  }

  Future changeLanguage(String code) async{
    await _pref.setString(language, code);
  }
  bool isRTL(){
    String selectedLanguage = _pref.getString(language) ?? "en";
    return selectedLanguage == "ar";
  }

  Future<bool> clear() async {
    return await _pref.clear();
  }
}
